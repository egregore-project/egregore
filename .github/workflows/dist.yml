name: Publish

on:
  pull_request:
    types: [closed]
    branches:
      - master
jobs:
  publish-nuget:
    runs-on: windows-latest
    env:
      DOTNET_NOLOGO: true
    if: github.event.pull_request.merged
    steps:
      - name: checkout
        if: github.event.pull_request.merged
        uses: actions/checkout@v1
        with:
          ref: master    
          submodules: 'recursive'
      
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 3.1.x

      # BEGIN (Source: https://gist.github.com/fredeil/26df20ef664b46f5ced338d5a8d8e8e9)

      - name: Install versioning tool 
        uses: aarnott/nbgv@master
        with:
          setAllVars: true
    
      - name: Chmod shell script
        run: chmod +x ./build/version.sh
        shell: bash
        continue-on-error: true
    
      - name: Tag git commit with new version
        run: ./build/version.sh
        env:
          VERSION_STAMP_TOKEN: ${{ secrets.VERSION_STAMP_TOKEN }}
        shell: bash
        continue-on-error: true

      # END

      - name: Install libman tool
        run: dotnet tool install --global Microsoft.Web.LibraryManager.Cli

      - name: Install client dependencies      
        working-directory: ./src/egregore
        run: libman restore

      - name: Pack NuGet
        run: dotnet pack ./src/egregore/egregore.csproj -p:LibraryRestore=false -p:FileVersion=${{env.NBGV_AssemblyFileVersion}} -p:InformationalVersion=${{env.NBGV_AssemblyInformationalVersion}} -p:AssemblyVersion=${{env.NBGV_AssemblyVersion}} -p:PackageVersion=${{env.NBGV_NuGetPackageVersion}} --configuration Release --include-source --include-symbols -o ./artifacts

      - name: Download minisign 0.9
        run: "(New-Object System.Net.WebClient).DownloadFile('https://github.com/jedisct1/minisign/releases/download/0.9/minisign-win64.zip', './minisign-win64.zip')"
        shell: powershell

      - name: Download minisign 0.9 signature
        run: "(New-Object System.Net.WebClient).DownloadFile('https://github.com/jedisct1/minisign/releases/download/0.9/minisign-win64.zip.minisig', './minisign-win64.zip.minisig')"
        shell: powershell

      - name: Unzip minisign-win64.zip        
        run: Expand-Archive -Path ./minisign-win64.zip -DestinationPath ./ -Force
        shell: powershell

      - name: Verify minisign 0.9
        run: minisign -Vm ./minisign-win64.zip -P "RWQf6LRCGA9i53mlYecO4IzT51TGPpvWucNSCh1CBM0QTaLn73Y7GFO3"
        shell: cmd

      - name: Prepare minisign key
        run: (echo ${{secrets.MINISIGN_UNTRUSTED_COMMENT}} & echo ${{secrets.MINISIGN_KEY}}) > minisign.key
        shell: cmd

      - name: Prepare minisign password
        run: (echo ${{secrets.MINISIGN_PASSWORD}}& echo.) > cleartext.txt
        shell: cmd

      - name: Sign NuGet Package
        run: minisign -Sm ./artifacts/egregore.${{env.NBGV_NuGetPackageVersion}}.nupkg -s minisign.key -t "git commit hash = ${{env.NBGV_GitCommitIdShort}}" < cleartext.txt            
        shell: cmd

      - name: Delete key materials
        run: del minisign.key && del cleartext.txt          
        shell: cmd
      
      - name: Upload NuGet Package signature
        uses: actions/upload-artifact@main
        with:
          name: egregore.${{env.NBGV_NuGetPackageVersion}}.nupkg.minisig
          path: ./artifacts/egregore.${{env.NBGV_NuGetPackageVersion}}.nupkg.minisig

      - name: Publish NuGet Packages
        run: dotnet nuget push ./artifacts/egregore.${{env.NBGV_NuGetPackageVersion}}.nupkg -k ${{secrets.NUGET_API_KEY}} -s https://api.nuget.org/v3/index.json --skip-duplicate

      - name: Set git short hash
        run: echo ${{env.NBGV_GitCommitIdShort}}> commit.txt
        shell: cmd

      - name: Upload git short hash
        uses: actions/upload-artifact@main
        with:
          name: commit.txt
          path: commit.txt

  deploy-win-x64:
    needs: publish-nuget
    runs-on: windows-latest
    env:
      DOTNET_NOLOGO: true
    if: github.event.pull_request.merged
    steps:
      - name: checkout
        if: github.event.pull_request.merged
        uses: actions/checkout@v1
        with:
          ref: master    
          submodules: 'recursive'
      
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 3.1.x
          
      - name: Download git short hash
        id: download
        uses: actions/download-artifact@main
        with:
          name: commit.txt

      - name: Set git short hash
        id: githash
        run: chmod 0755 commit.txt && echo "::set-output name=version::$(cat commit.txt)"

      - name: Install libman tool
        run: dotnet tool install --global Microsoft.Web.LibraryManager.Cli

      - name: Install client dependencies      
        working-directory: ./src/egregore
        run: libman restore

      - name: Publish win-x64
        env:
          DIST_VERSION: ${{steps.githash.outputs.version}}
        run: dotnet publish ./src/egregore/egregore.csproj --configuration Release -r win-x64 -p:LibraryRestore=false -p:PublishReadyToRun=true -p:PublishReadyToRunShowWarnings=true -p:PublishSingleFile=true -p:PublishTrimmed=true -o "dist/win-x64-${{env.DIST_VERSION}}"
    
      - name: Download minisign 0.9
        run: "(New-Object System.Net.WebClient).DownloadFile('https://github.com/jedisct1/minisign/releases/download/0.9/minisign-win64.zip', './minisign-win64.zip')"
        shell: powershell

      - name: Download minisign 0.9 signature
        run: "(New-Object System.Net.WebClient).DownloadFile('https://github.com/jedisct1/minisign/releases/download/0.9/minisign-win64.zip.minisig', './minisign-win64.zip.minisig')"
        shell: powershell

      - name: Unzip minisign-win64.zip        
        run: Expand-Archive -Path ./minisign-win64.zip -DestinationPath ./ -Force
        shell: powershell

      - name: Verify minisign 0.9
        run: minisign -Vm ./minisign-win64.zip -P "RWQf6LRCGA9i53mlYecO4IzT51TGPpvWucNSCh1CBM0QTaLn73Y7GFO3"
        shell: cmd

      - name: Prepare minisign key
        run: (echo ${{secrets.MINISIGN_UNTRUSTED_COMMENT}} & echo ${{secrets.MINISIGN_KEY}}) > minisign.key
        shell: cmd

      - name: Prepare minisign password
        run: (echo ${{secrets.MINISIGN_PASSWORD}}& echo.) > cleartext.txt
        shell: cmd

      - name: Sign executable
        env:
          DIST_VERSION: ${{steps.githash.outputs.version}}
        run: chmod 0755 "./dist/win-x64-${{env.DIST_VERSION}}" && minisign -Sm "./dist/win-x64-${{env.DIST_VERSION}}" -s minisign.key -t "git commit hash = ${{env.DIST_VERSION}}" < cleartext.txt            
        shell: cmd

      - name: Upload win-x64
        uses: actions/upload-artifact@main
        env:
          DIST_VERSION: ${{steps.githash.outputs.version}}
        with:
          name: "win-x64-${{env.DIST_VERSION}}"
          path: "dist/win-x64-${{env.DIST_VERSION}}"

  deploy-linux-x64:
    runs-on: ubuntu-latest
    needs: publish-nuget
    env:
      DOTNET_NOLOGO: true
    if: github.event.pull_request.merged
    steps:
      - name: checkout
        if: github.event.pull_request.merged
        uses: actions/checkout@v1
        with:
          ref: master    
          submodules: 'recursive'
      
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 3.1.x

      - name: Download git short hash
        id: download
        uses: actions/download-artifact@main
        with:
          name: commit.txt

      - name: Set git short hash
        id: githash
        run: chmod 0755 commit.txt && echo "::set-output name=version::$(cat commit.txt)"

      - name: Install libman tool
        run: dotnet tool install --global Microsoft.Web.LibraryManager.Cli

      - name: Install client dependencies      
        working-directory: ./src/egregore
        run: libman restore

      - name: Publish linux-x64
        env:
          DIST_VERSION: ${{steps.githash.outputs.version}}
        run: dotnet publish ./src/egregore/egregore.csproj --configuration Release -r linux-x64 -p:LibraryRestore=false -p:PublishReadyToRun=true -p:PublishReadyToRunShowWarnings=true -p:PublishSingleFile=true -p:PublishTrimmed=true -o "dist/linux-x64-${{env.DIST_VERSION}}"
   
      - name: Upload linux-x64
        uses: actions/upload-artifact@main
        env:
          DIST_VERSION: ${{ steps.githash.outputs.version }}
        with:
          name: "linux-x64-${{env.DIST_VERSION}}"
          path: "dist/linux-x64-${{env.DIST_VERSION}}"

  deploy-osx-x64:
    runs-on: macos-latest
    needs: publish-nuget
    env:
      DOTNET_NOLOGO: true
    if: github.event.pull_request.merged
    steps:
      - name: checkout
        if: github.event.pull_request.merged
        uses: actions/checkout@v1
        with:
          ref: master    
          submodules: 'recursive'
      
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 3.1.x
      - name: Download git short hash
        uses: actions/download-artifact@main
        with:
          name: commit.txt

      - name: Set git short hash
        id: githash
        run: chmod 0755 commit.txt && echo "::set-output name=version::$(cat commit.txt)"
        
      - name: Install libman tool
        run: dotnet tool install --global Microsoft.Web.LibraryManager.Cli

      - name: Install client dependencies      
        working-directory: ./src/egregore
        run: libman restore

      - name: Publish osx-x64
        env:
          DIST_VERSION: ${{ steps.githash.outputs.version }}
        run: dotnet publish ./src/egregore/egregore.csproj --configuration Release -r osx-x64 -p:LibraryRestore=false -p:PublishReadyToRun=true -p:PublishSingleFile=true -p:PublishTrimmed=true -o "dist/osx-x64-${{env.DIST_VERSION}}"

      - name: Download minisign 0.9
        run: wget https://github.com/jedisct1/minisign/releases/download/0.9/minisign-osx.zip

      - name: Upload osx-x64
        uses: actions/upload-artifact@main
        env:
          DIST_VERSION: ${{ steps.githash.outputs.version }}
        with:
          name: "osx-x64-${{env.DIST_VERSION}}"
          path: "dist/osx-x64-${{env.DIST_VERSION}}"
